generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EnumRole {
  cashier
  admin
}

model User {
  id        String  @id @default(cuid())
  username  String  @unique
  password  String
  role      EnumRole

  shift     Shift[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Shift {
  id         String   @id @default(cuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  start_time DateTime @default(now())
  end_time   DateTime?

  transaksi  Transaksi[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id        String  @id @default(cuid())
  name      String  @unique

  products  Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Payment {
  id        String  @id @default(cuid())
  name      String  @unique

  transaksi Transaksi[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

enum EnumSalesType {
  DO
  DineIn
  Gojek
  TakeAway
}

model Transaksi {
  id                String  @id @default(cuid())
  customer_name     String
  total_amount      Int
  sales_type        EnumSalesType @default(TakeAway)
  paid_amount       Int?  @default(0)
  change            Int?  @default(0)

  shift_id          String
  shift             Shift @relation(fields: [shift_id], references: [id], onDelete: Cascade)

  payment_id        String
  payment           Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade)

  voucher_id        String? 
  voucher           Voucher? @relation(fields: [voucher_id], references: [id])

  transaksi_product TransaksiProduct[]
  transaksi_topping TransaksiTopping[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model TransaksiProduct {
  id           String  @id @default(cuid())

  transaksi_id String
  transaksi    Transaksi @relation(fields: [transaksi_id], references: [id], onDelete: Cascade)

  product_id   String
  product      Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  quantity     Int
  subtotal     Int  // (quantity * price)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id          String  @id @default(cuid())
  name        String  @unique
  price       Int
  quantity    Int
  image       String

  category_id String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  transaksi   TransaksiProduct[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TransaksiTopping {
  id           String  @id @default(cuid())

  transaksi_id String
  transaksi    Transaksi @relation(fields: [transaksi_id], references: [id], onDelete: Cascade)

  topping_id   String
  topping      Topping @relation(fields: [topping_id], references: [id], onDelete: Cascade)

  quantity     Int
  subtotal     Int  // (quantity * price)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Topping {
  id          String  @id @default(cuid())
  name        String  @unique
  price       Int
  quantity    Int     @default(0)

  // Relasi many-to-many ke transaksi
  transaksi_topping TransaksiTopping[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Voucher {
  id            String  @id @default(cuid())
  discount      Int
  name          String
  minimum_price Int     @default(0)
  maximum_price Int     @default(0)
  max_usage     Int     @default(0)
  voucher_end   DateTime  @default(now())

  transaksi     Transaksi[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

