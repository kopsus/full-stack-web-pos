generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EnumRole {
  cashier
  admin
}

model User {
  id        String  @id @default(cuid())
  username  String  @unique
  password  String
  role      EnumRole

  // Relasi ke transaksi
  transaksi Transaksi[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Product {
  id                String  @id @default(cuid())
  name              String
  price             Int
  image             String

  // Relasi ke kategori & stok
  category_product  Category[]
  stock             Stock[]

  // Relasi many-to-many ke transaksi
  transaksi         TransaksiProduct[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
}

model Category {
  id          String  @id @default(cuid())
  name        String

  // Foreign key ke product
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Stock {
  id          String  @id @default(cuid())
  stock       Int

  // Foreign key ke product
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Payment {
  id          String  @id @default(cuid())
  name        String

  // Relasi ke Transaksi
  transaksi   Transaksi[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Transaksi {
  id            String  @id @default(cuid())
  customer_name String
  total_amount  Int

  // Foreign key ke user
  user_id  String
  user     User  @relation(fields: [user_id], references: [id])

  // Foreign key ke payment
  payment_id  String
  payment     Payment @relation(fields: [payment_id], references: [id])

  // Relasi many-to-many ke produk, topping, dan voucher
  transaksi_product TransaksiProduct[]
  transaksi_topping TransaksiTopping[]
  transaksi_voucher TransaksiVoucher[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model TransaksiProduct {
  id           String  @id @default(cuid())

  // Foreign key ke transaksi
  transaksi_id String
  transaksi    Transaksi @relation(fields: [transaksi_id], references: [id])

  // Foreign key ke product
  product_id   String
  product      Product @relation(fields: [product_id], references: [id])

  quantity     Int

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}

model Topping {
  id          String  @id @default(cuid())
  name        String
  price       Int

  // Relasi many-to-many ke transaksi
  transaksi_topping TransaksiTopping[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model TransaksiTopping {
  id           String  @id @default(cuid())

  // Foreign key ke transaksi
  transaksi_id String
  transaksi    Transaksi @relation(fields: [transaksi_id], references: [id])

  // Foreign key ke topping
  topping_id   String
  topping      Topping @relation(fields: [topping_id], references: [id])

  quantity     Int

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}

model Voucher {
  id            String  @id @default(cuid())
  name          String
  percentage    Int
  minimum_price Int
  maximum_price Int
  max_usage     Int
  voucher_end   DateTime

  // Relasi many-to-many ke transaksi
  transaksi_voucher TransaksiVoucher[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model TransaksiVoucher {
  id           String  @id @default(cuid())

  // Foreign key ke transaksi
  transaksi_id String
  transaksi    Transaksi @relation(fields: [transaksi_id], references: [id])

  // Foreign key ke voucher
  voucher_id   String
  voucher      Voucher @relation(fields: [voucher_id], references: [id])

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}
